using System;
using MerchantTribe.Commerce;
using System.IO;
using System.Text;
using System.Data;
using System.Web.UI.WebControls;
using System.Collections.ObjectModel;
using MerchantTribe.Commerce.Membership;
using MerchantTribe.Commerce.Content;
using MerchantTribe.Commerce.Orders;
using BVSoftware.Cryptography;

partial class BVAdmin_Orders_UPSOnlineTools_Ship : BaseAdminPage
{

	public override bool RequiresSSL {
		get { return true; }
	}

    protected override void OnPreInit(EventArgs e)
    {
        base.OnPreInit(e);
		this.PageTitle = "Ups Online Tools - Ship Items";
		this.CurrentTab = AdminTabType.Orders;
		ValidateCurrentUserHasPermission(SystemPermissions.OrdersView);
	}

    protected override void OnLoad(EventArgs e)
    {
        base.OnLoad(e);
		if (!Page.IsPostBack) {
			this.CurrentTab = AdminTabType.Orders;
			LoadCountries();

			SetDefaults();
			PopulateFromAddress();

			if (Request.QueryString["PackageID"] != null) {
				this.PackageIdField.Value = Request.QueryString["PackageID"];
			}
			if (Request.QueryString["ReturnURL"] != null) {
				this.ReturnUrlField.Value = Request.QueryString["ReturnURL"];
			}
			if (this.PackageIdField.Value != string.Empty) {
				LoadPackageSettings();
			}
		}

	}

	private void LoadCountries()
	{
		Collection<Country> dt = Country.FindActive();
		if (dt.Count > 0) {
			this.FromCountryField.Items.Clear();
			this.ToCountryField.Items.Clear();

			this.FromCountryField.DataSource = dt;
			this.FromCountryField.DataTextField = "DisplayName";
			this.FromCountryField.DataValueField = "ISOCode";
			this.FromCountryField.DataBind();
			this.FromCountryField.Items.FindByValue("US").Selected = true;

			this.ToCountryField.DataSource = dt;
			this.ToCountryField.DataTextField = "DisplayName";
			this.ToCountryField.DataValueField = "ISOCode";
			this.ToCountryField.DataBind();
			this.ToCountryField.Items.FindByValue("US").Selected = true;

		}


	}

	private void SetDefaults()
	{
        this.ServiceField.SelectedValue = CurrentStore.ShippingUpsDefaultService.ToString();
        this.PackageTypeField.SelectedValue = CurrentStore.ShippingUpsDefaultPackaging.ToString();
        this.BillToAccountNumberField.Text = CurrentStore.ShippingUpsAccountNumber;
        this.BillToField.SelectedValue = CurrentStore.ShippingUpsDefaultPayment.ToString();

		this.CCExpYearField.Items.Clear();
		for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 10; i++) {
			this.CCExpYearField.Items.Add(new ListItem(i.ToString(), i.ToString()));
		}

		MerchantTribe.Shipping.Ups.UpsProvider.PopulateListWithCurrencies(this.CODCurrencyField.Items);
		MerchantTribe.Shipping.Ups.UpsProvider.PopulateListWithCurrencies(this.DeclaredValueCurrencyField.Items);

		if (Request.IsSecureConnection == false) {
			this.trWarning.Visible = true;
		}
		else {
			this.trWarning.Visible = false;
		}
	}

	private void PopulateFromAddress()
	{
		MerchantTribe.Commerce.Contacts.Address siteAddress = MerchantTribe.Commerce.Contacts.Address.FindStoreContactAddress();

		if (siteAddress != null) {
			this.FromCompanyField.Text = siteAddress.Company;
			this.FromNameField.Text = siteAddress.FirstName + " " + siteAddress.LastName;
			this.FromPhoneField.Text = siteAddress.Phone;
			this.FromAddress1Field.Text = siteAddress.Line1;
			this.FromAddress2Field.Text = siteAddress.Line2;
			this.FromCityField.Text = siteAddress.City;
			Region r = new Region();
			r = Country.FindByBvin(siteAddress.CountryBvin).FindRegion(siteAddress.RegionBvin);
			if (r != null) {
				this.FromStateField.Text = r.Abbreviation;
			}
			this.FromPostalCodeField.Text = siteAddress.PostalCode;
		}
	}

	private void LoadPackageSettings()
	{
        MerchantTribe.Commerce.Shipping.Package p = MerchantTribe.Commerce.Shipping.Package.FindByBvin(this.PackageIdField.Value);
		if (p != null) {

			string orderID = p.OrderId;
			MerchantTribe.Commerce.Orders.Order o = MerchantTribe.Commerce.Orders.Order.FindByBvin(orderID);

			if (o != null) {
				// To Address
				this.ToAddress1Field.Text = o.ShippingAddress.Line1;
				this.ToAddress2Field.Text = o.ShippingAddress.Line2;
				this.ToCityField.Text = o.ShippingAddress.City;
				this.ToCompanyField.Text = o.ShippingAddress.Company;
				if (this.ToCountryField.Items.FindByValue(o.ShippingAddress.CountryBvin) != null) {
					this.ToCountryField.ClearSelection();
					this.ToCountryField.Items.FindByValue(o.ShippingAddress.CountryBvin).Selected = true;
				}
				this.ToNameField.Text = o.ShippingAddress.FirstName;
				if (o.ShippingAddress.MiddleInitial.Length > 0) {
					this.ToNameField.Text += " " + o.ShippingAddress.MiddleInitial;
				}
				this.ToNameField.Text += " " + o.ShippingAddress.LastName;
				this.ToPhoneField.Text = o.ShippingAddress.Phone;
				this.ToPostalCodeField.Text = o.ShippingAddress.PostalCode;
				if (o.ShippingAddress.RegionBvin.Length > 0) {
					Region r = new Region();
					r = Country.FindByBvin(o.ShippingAddress.CountryBvin).FindRegion(o.ShippingAddress.RegionBvin);
					if (r != null) {
						this.ToStateField.Text = r.Abbreviation;
					}
					else {
						this.ToStateField.Text = o.ShippingAddress.RegionName;
					}
				}
				else {
					this.ToStateField.Text = o.ShippingAddress.RegionName;
				}
				this.NotificationEmailField.Text = o.UserEmail;
			}


			if (this.ServiceField.Items.FindByValue(p.ShippingProviderServiceCode) != null) {
				this.ServiceField.ClearSelection();
				this.ServiceField.Items.FindByValue(p.ShippingProviderServiceCode).Selected = true;
			}

			if (p.Weight > 0) {
				this.WeightField.Text = p.Weight.ToString();
			}

			if (p.Height > 0) {
                this.HeightField.Text = p.Height.ToString();
			}
			if (p.Width > 0) {
                this.WidthField.Text = p.Width.ToString();
			}
			if (p.Length > 0) {
                this.LengthField.Text = p.Length.ToString();
			}

			decimal declaredValue = p.FindDeclaredValue();
			if (declaredValue > 0) {
				this.DeclaredValueField.Text = declaredValue.ToString("#.00");
			}

			this.Reference1Field.Text = "Order " + o.OrderNumber + "-P" + this.PackageIdField.Value;
			this.Reference2Field.Text = o.ShippingAddress.Phone;

		}
	}

	protected void btnCanel_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
	{
		OnContinue(true);
	}

    protected void btnShip_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
	{
		this.pnlPrint.Visible = false;
		this.pnlRates.Visible = false;

		msg.ClearMessage();

		MerchantTribe.Shipping.Ups.ShipRequest req = new MerchantTribe.Shipping.Ups.ShipRequest();


		req.AddressVerification = this.chkAddressVerification.Checked;

		req.BillTo = (MerchantTribe.Shipping.Ups.PaymentType)int.Parse(this.BillToField.SelectedValue);
		if (req.BillTo == MerchantTribe.Shipping.Ups.PaymentType.ShipperCreditCard) {
			req.BillToCreditCardExpirationMonth = int.Parse(this.CCExpMonthField.SelectedValue);
			req.BillToCreditCardExpirationYear = int.Parse(this.CCExpYearField.SelectedValue);
			req.BillToCreditCardNumber = BVSoftware.Payment.CardValidator.CleanCardNumber(this.CCNumberField.Text);
			req.BillToCreditCardType = (MerchantTribe.Shipping.Ups.CreditCardType)int.Parse(this.CCTypeField.SelectedValue);
		}
		else {
			req.BillToAccountNumber = this.BillToAccountNumberField.Text;
			if (this.BillToPostalCodeField.Text.Trim().Length > 0) {
				req.BillToPostalCode = this.BillToPostalCodeField.Text.Trim();
			}
		}
		req.BillToCountryCode = this.BillToCountryField.SelectedValue;

		req.BrowserHttpUserAgentString = Request.UserAgent;
		req.COD = false;

		if (this.DescriptionField.Text.Trim() != string.Empty) {
			req.ShipmentDescription = this.DescriptionField.Text.Trim();
		}
		req.InvoiceLineTotal = false;
		req.LabelFormat = MerchantTribe.Shipping.Ups.ShipLabelFormat.Gif;
		//req.LabelStockSizeHeight = 4
		//req.LabelStockSizeWidth = 6
		req.NonValuedDocumentsOnly = false;

		req.Notification = this.chkNotification.Checked;
		req.NotificationEmailAddress = this.NotificationEmailField.Text;
		req.NotificationFromName = this.NotificationFromField.Text;
		req.NotificationMemo = this.NotificationMessage.Text;
		req.NotificationSubjectType = (MerchantTribe.Shipping.Ups.NotificationSubjectCode)int.Parse(this.NotificationSubjectField.SelectedValue);
		req.NotificationType = (MerchantTribe.Shipping.Ups.NotificationCode)int.Parse(this.NotificationTypeField.SelectedValue);

		req.SaturdayDelivery = this.chkSaturdayDelivery.Checked;
		req.Service = (MerchantTribe.Shipping.Ups.ServiceType)int.Parse(this.ServiceField.SelectedValue);
        req.Settings.UserID = CurrentStore.ShippingUpsUsername;
        req.Settings.Password = CurrentStore.ShippingUpsPassword;
        req.Settings.License = CurrentStore.ShippingUpsLicense;
        req.Settings.ServerUrl = WebAppSettings.ShippingUpsServer;

		if (this.FromCompanyField.Text.Trim().Length < 1) {
			req.ShipFrom.CompanyOrContactName = this.FromNameField.Text;
		}
		else {
			req.ShipFrom.CompanyOrContactName = this.FromCompanyField.Text;
		}
		req.ShipFrom.AttentionName = this.FromNameField.Text;
        req.ShipFrom.AccountNumber = CurrentStore.ShippingUpsAccountNumber;
		req.ShipFrom.PhoneNumber = this.FromPhoneField.Text;
		req.ShipFrom.AddressLine1 = this.FromAddress1Field.Text.Trim();
		req.ShipFrom.AddressLine2 = this.FromAddress2Field.Text.Trim();
		req.ShipFrom.City = this.FromCityField.Text;
		req.ShipFrom.StateProvinceCode = this.FromStateField.Text;
		req.ShipFrom.PostalCode = this.FromPostalCodeField.Text.Trim();
		req.ShipFrom.CountryCode = this.FromCountryField.SelectedValue;

		req.Shipper = req.ShipFrom;

		if (this.ToCompanyField.Text.Trim().Length < 1) {
			req.ShipTo.CompanyOrContactName = this.ToNameField.Text;
		}
		else {
			req.ShipTo.CompanyOrContactName = this.ToCompanyField.Text;
		}
		req.ShipTo.AttentionName = this.ToNameField.Text;
		req.ShipTo.PhoneNumber = this.ToPhoneField.Text;
		req.ShipTo.AddressLine1 = this.ToAddress1Field.Text.Trim();
		req.ShipTo.AddressLine2 = this.ToAddress2Field.Text.Trim();
		req.ShipTo.City = this.ToCityField.Text;
		req.ShipTo.StateProvinceCode = this.ToStateField.Text;
		req.ShipTo.PostalCode = this.ToPostalCodeField.Text.Trim();
		req.ShipTo.CountryCode = this.ToCountryField.SelectedValue;
		req.ShipTo.ResidentialAddress = this.chkResidential.Checked;


		bool useDeclaredValueInsteadOfInsurance = false;

		req.InvoiceLineTotal = false;
		//2004.6
		if (this.DeclaredValueField.Text.Trim() != string.Empty) {
			if (req.ShipFrom.CountryCode == "US") {
				if (this.PackageTypeField.SelectedValue != "1") {
					if (req.ShipTo.CountryCode == "CA" | req.ShipTo.CountryCode == "PR") {
						useDeclaredValueInsteadOfInsurance = true;
						req.InvoiceLineTotal = true;
						req.InvoiceLineTotalAmount = decimal.Parse(this.DeclaredValueField.Text.Trim());
						req.InvoiceLineTotalCurrency = MerchantTribe.Shipping.Ups.XmlTools.ConvertStringToCurrencyCode(this.DeclaredValueCurrencyField.SelectedValue);
					}
				}
			}
		}

		MerchantTribe.Shipping.Ups.Package p = new MerchantTribe.Shipping.Ups.Package();
		p.AdditionalHandlingIsRequired = this.chkAdditionalHandling.Checked;

		if (this.CODAmountField.Text.Trim() != string.Empty) {
			p.COD = true;
			p.CODAmount = decimal.Parse(this.CODAmountField.Text.Trim());
			p.CODCurrencyCode = MerchantTribe.Shipping.Ups.XmlTools.ConvertStringToCurrencyCode(this.CODCurrencyField.SelectedValue);
		}
		else {
			p.COD = false;
		}

		if (this.DeliveryConfirmationField.SelectedValue == "0") {
			p.DeliveryConfirmation = false;
		}
		else {
			p.DeliveryConfirmation = true;
			p.DeliveryConfirmationType = (MerchantTribe.Shipping.Ups.ConfirmationType)int.Parse(this.DeliveryConfirmationField.SelectedValue);
		}

		p.DimensionalUnits = (MerchantTribe.Shipping.Ups.UnitsType)int.Parse(this.DimensionalUnitsField.SelectedValue);
		if (this.HeightField.Text.Trim() != string.Empty) {
			p.Height = decimal.Parse(this.HeightField.Text);
		}

		//2004.6
		if (useDeclaredValueInsteadOfInsurance == false) {
			if (this.DeclaredValueField.Text.Trim() != string.Empty) {
				p.InsuredValue = decimal.Parse(this.DeclaredValueField.Text.Trim());
				p.InsuredValueCurrency = MerchantTribe.Shipping.Ups.XmlTools.ConvertStringToCurrencyCode(this.DeclaredValueCurrencyField.SelectedValue);
			}
		}

		if (this.LengthField.Text.Trim() != string.Empty) {
			p.Length = decimal.Parse(this.LengthField.Text);
		}
		p.Packaging = (MerchantTribe.Shipping.Ups.PackagingType)int.Parse(this.PackageTypeField.SelectedValue);



		if (this.Reference1Field.Text.Trim() != string.Empty) {
			p.ReferenceNumber = this.Reference1Field.Text;
			p.ReferenceNumberType = MerchantTribe.Shipping.Ups.ReferenceNumberCode.TransactionReferenceNumber;
		}
		if (this.Reference2Field.Text.Trim() != string.Empty) {
			p.ReferenceNumber2 = this.Reference2Field.Text;
			p.ReferenceNumber2Type = MerchantTribe.Shipping.Ups.ReferenceNumberCode.TransactionReferenceNumber;
		}

		p.VerbalConfirmation = false;
		if (this.WeightField.Text.Trim() != string.Empty) {
			p.Weight = decimal.Parse(this.WeightField.Text);
		}
		p.WeightUnits = (MerchantTribe.Shipping.Ups.UnitsType)int.Parse(this.WeightUnitsField.SelectedValue);
		if (this.WidthField.Text.Trim() != string.Empty) {
			p.Width = decimal.Parse(this.WidthField.Text);
		}

		p.VerbalConfirmation = this.chkVerbalConfirmation.Checked;
		if (p.VerbalConfirmation == true) {
			p.VerbalConfirmationName = this.VerbalNameField.Text.Trim();
			p.VerbalConfirmationPhoneNumber = this.VerbalPhoneField.Text.Trim();
		}
		req.AddPackage(ref p);


		ViewState["ShipDigest"] = null;
		ViewState["TrackingNumber"] = null;

		MerchantTribe.Shipping.Ups.ShipResponse res;
		res = MerchantTribe.Shipping.Ups.XmlTools.SendConfirmRequest(ref req);

		if (res != null) {

            if (CurrentStore.ShippingUPSWriteXML == true)
            {
				this.SaveXmlStringToFile("Confirm_" + res.TrackingNumber + "_Request.xml", req.XmlConfirmRequest);
				this.SaveXmlStringToFile("Confirm_" + res.TrackingNumber + "_Response.xml", req.XmlConfirmResponse);
			}

			if (res.Success == true) {
				ViewState["ShipDigest"] = res.ShipmentDigest;
				ViewState["TrackingNumber"] = res.TrackingNumber;
				msg.ShowInformation("Please review the courtesy rate and select an action.");
				this.lblServiceOptions.Text = string.Format("{0:C}", res.ServiceOptionsCharge);
				this.lblShipCharges.Text = string.Format("{0:C}", res.TransportationCharge);
				this.lblRate.Text = string.Format("{0:C}", res.TotalCharge);

				this.pnlGetRates.Visible = false;
				this.pnlRates.Visible = true;
			}
			else {
				this.msg.ShowWarning("Error " + res.ErrorCode + ": " + res.ErrorMessage);
			}
		}
		else {
			msg.ShowError("Response object was empty");
		}

	}

    protected void Imagebutton1_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
	{
		msg.ClearMessage();
		this.pnlPrint.Visible = false;
		this.pnlRates.Visible = false;
		this.pnlGetRates.Visible = true;
	}

    protected void Imagebutton2_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
	{
		msg.ClearMessage();

		string digest = string.Empty;
		if ((ViewState["ShipDigest"] != null)) {
			digest = (string)ViewState["ShipDigest"];
		}
		// Send accept here
		if (digest != string.Empty) {

			MerchantTribe.Shipping.Ups.ShipAcceptRequest req = new MerchantTribe.Shipping.Ups.ShipAcceptRequest();
            req.Settings.UserID = CurrentStore.ShippingUpsUsername;
            req.Settings.Password = CurrentStore.ShippingUpsPassword;
            req.Settings.License = CurrentStore.ShippingUpsLicense;
			req.Settings.ServerUrl = WebAppSettings.ShippingUpsServer;
			req.ShipDigest = digest;

			MerchantTribe.Shipping.Ups.ShipAcceptResponse res;
			res = MerchantTribe.Shipping.Ups.XmlTools.SendShipAcceptRequest(ref req);

            if (CurrentStore.ShippingUPSWriteXML == true)
            {
				this.SaveXmlStringToFile("Accept_" + ViewState["TrackingNumber"] + "_Request.xml", req.XmlAcceptRequest);
				this.SaveXmlStringToFile("Accept_" + ViewState["TrackingNumber"] + "_Response.xml", req.XmlAcceptResponse);
			}

			if (res != null) {

				if (res.Success == true) {

					if (!(res.Packages == null)) {
						if (res.Packages.Count > 0) {
							MerchantTribe.Shipping.Ups.ShippedPackageInformation pak;
							pak = (MerchantTribe.Shipping.Ups.ShippedPackageInformation)res.Packages[0];
							if (pak != null) {


								if (pak.LabelFormat == MerchantTribe.Shipping.Ups.ShipLabelFormat.Epl2) {
									SaveBase64ToFile(pak.TrackingNumber + ".elp2", pak.Base64Image);
								}
								else {
									SaveBase64ToFile("label" + pak.TrackingNumber + ".gif", pak.Base64Image);
								}
								SaveBase64ToFile(pak.TrackingNumber + ".htm", pak.Base64Html);

								AddPopUpWindow(Path.Combine(CurrentStore.RootUrl(), "images/UPS/" + pak.TrackingNumber + ".htm"));
								this.pnlPrint.Visible = true;
								this.lnkLabel.NavigateUrl = Path.Combine(CurrentStore.RootUrl(), "images/UPS/" + pak.TrackingNumber + ".htm");

								msg.ShowOk("Package Shipped with UPS Tracking Number: " + res.TrackingNumber);

								if (this.PackageIdField.Value != string.Empty) {
									MerchantTribe.Commerce.Shipping.Package p = MerchantTribe.Commerce.Shipping.Package.FindByBvin(this.PackageIdField.Value);
									if (p != null) {
										Order o = Order.FindByBvin(p.OrderId);
										OrderShippingStatus previousShippingStatus = o.ShippingStatus;

										p.TrackingNumber = res.TrackingNumber;
										p.ShippingProviderId = MerchantTribe.Shipping.Ups.UpsProvider.UPSProviderID;
										p.ShippingProviderServiceCode = this.ServiceField.SelectedValue;
										p.Ship();
										MerchantTribe.Commerce.Shipping.Package.Update(p);

										o = Order.FindByBvin(p.OrderId);
										MerchantTribe.Commerce.BusinessRules.OrderTaskContext context = new MerchantTribe.Commerce.BusinessRules.OrderTaskContext();
										context.Order = o;
										context.UserId = o.UserID;
										context.Inputs.Add("bvsoftware", "PreviousShippingStatus", ((int)previousShippingStatus).ToString());
										MerchantTribe.Commerce.BusinessRules.Workflow.RunByName(context, MerchantTribe.Commerce.BusinessRules.WorkflowNames.ShippingChanged);
									}
								}
							}

							else {
								msg.ShowError("Unable to load label for shipment!");
							}
						}
						else {
							msg.ShowError("Empty Package List Found!");
						}
					}
					else {
						msg.ShowError("No package list was found!");
					}
				}


				else {
					this.msg.ShowWarning("Error " + res.ErrorCode + ": " + res.ErrorMessage);
				}
			}
			else {
				msg.ShowError("Unable to parse response with label!");
			}
		}

		else {
			msg.ShowError("Ship Response Object was empty.");
		}

		this.pnlGetRates.Visible = true;
		this.pnlRates.Visible = false;


	}

	private bool SaveBase64ToFile(string filename, string base64data)
	{
		bool result = false;

		string UPSLabelDirectory = Path.Combine(Request.PhysicalApplicationPath, "images\\UPS");
		try {
			if (Directory.Exists(UPSLabelDirectory) == false) {
				Directory.CreateDirectory(UPSLabelDirectory);
			}

			FileStream fs = new FileStream(Path.Combine(UPSLabelDirectory, filename), FileMode.Create);

			byte[] data = Base64.ConvertFromBase64(base64data);
			fs.Write(data, 0, data.Length - 1);
			fs.Flush();
			fs.Close();
		}

		catch (Exception ex) {
			EventLog.LogEvent(ex);
		}

		return result;
	}

	private void AddPopUpWindow(string url)
	{

		StringBuilder sb = new StringBuilder();
		sb.Append("");
		sb.Append("<Script Language=Javascript>");
		sb.Append("javascript:window.open( '");
		sb.Append(url);
		sb.Append("', 'UPSLabel', 'menubar=1,scrollbars=yes,toolbar=1,resizable=");
		sb.Append("1,");
		sb.Append("');");
		sb.Append("</Script>");
		ClientScript.RegisterStartupScript(typeof(System.Web.UI.Page), "onLoad", sb.ToString());
		sb = null;

	}

	private bool SaveXmlStringToFile(string filename, string data)
	{
		bool result = false;
		string UPSLabelDirectory = Path.Combine(Request.PhysicalApplicationPath, "images\\UPS\\Xml");
		try {
			if (Directory.Exists(UPSLabelDirectory) == false) {
				Directory.CreateDirectory(UPSLabelDirectory);
			}
			StreamWriter writer = new StreamWriter(Path.Combine(UPSLabelDirectory, filename), false);
			writer.Write(data);
			writer.Flush();
			writer.Close();
		}
		catch (Exception ex) {
			EventLog.LogEvent(ex);
		}
		return result;
	}

    protected void btnContinue_Click(System.Object sender, System.Web.UI.ImageClickEventArgs e)
	{
		OnContinue(false);
	}

	private void OnContinue(bool deletePackage)
	{
		if (deletePackage) {
			MerchantTribe.Commerce.Shipping.Package p = MerchantTribe.Commerce.Shipping.Package.FindByBvin(this.PackageIdField.Value);
			if (p != null) {
				if (p.Bvin != string.Empty) {
					MerchantTribe.Commerce.Shipping.Package.Delete(p.Bvin);
				}
			}
		}

		if (this.ReturnUrlField.Value.Length > 0) {
			Response.Redirect(this.ReturnUrlField.Value);
		}
		else {
			Response.Redirect("Default.aspx");
		}
	}

}
