using System;
using System.Web;
using System.Web.UI.WebControls;
using MerchantTribe.Commerce;
using MerchantTribe.Commerce.Orders;
using MerchantTribe.Commerce.Membership;
using MerchantTribe.Commerce.Utilities;
using MerchantTribe.Commerce.Shipping;
using MerchantTribe.Commerce.Payment;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

partial class BVAdmin_Orders_RMADetail : BaseAdminPage
{

	private RMA rma;

    protected override void OnPreInit(EventArgs e)
    {
        base.OnPreInit(e);
		this.PageTitle = "Return Details";
		this.CurrentTab = AdminTabType.Orders;
		ValidateCurrentUserHasPermission(SystemPermissions.OrdersEdit);
	}

	public string RMABvin {
		get {
			string obj = (string)ViewState["RMABvin"];
			if (obj != null) {
				return (string)obj;
			}
			else {
				return string.Empty;
			}
		}
		set { ViewState["RMABvin"] = value; }
	}

    protected override void OnLoad(EventArgs e)
    {
        base.OnLoad(e);
		if (!Page.IsPostBack) {
			if (Request.QueryString["id"] == null) {
				Response.Redirect("~/BVAdmin/Orders/RMA.aspx");
			}
			else {
				this.RMABvin = Request.QueryString["id"];
				rma = RMA.FindByBvin(this.RMABvin);
				BindRMAInfo();
				BindRMAGridView();
			}
		}

		rma = RMA.FindByBvin(this.RMABvin);

		BindButtons();
	}

	protected void BindRMAGridView()
	{
		rma = RMA.FindByBvin(this.RMABvin);
		if (rma.Bvin != string.Empty) {
			RMA.Update(rma);
			RMAGridView.DataSource = rma.Items;
			RMAGridView.DataBind();
		}
	}

	protected void BindRMAInfo()
	{
		StatusLabel.Text = rma.StatusText;
		NameLabel.Text = rma.Name;
		PhoneNumberLabel.Text = rma.PhoneNumber;
		EmailAddressLabel.Text = rma.EmailAddress;
		DateOfReturnLabel.Text = rma.DateOfReturn.ToString("d");
		CommentsLabel.Text = rma.Comments;
	}

	protected void BindButtons()
	{
		if (rma.Bvin != string.Empty) {
			if (rma.Status == RMAStatus.Pending) {
				ApproveImageButton.Visible = true;
				CloseImageButton.Visible = false;
				ReopenImageButton.Visible = false;
				RejectImageButton.Visible = true;
			}
			else if (rma.Status == RMAStatus.Open) {
				ApproveImageButton.Visible = false;
				CloseImageButton.Visible = true;
				ReopenImageButton.Visible = false;
				RejectImageButton.Visible = false;
			}
			else if (rma.Status == RMAStatus.Closed) {
				ApproveImageButton.Visible = false;
				CloseImageButton.Visible = false;
				ReopenImageButton.Visible = true;
				RejectImageButton.Visible = false;
			}
			else if (rma.Status == RMAStatus.Rejected) {
				ApproveImageButton.Visible = false;
				CloseImageButton.Visible = false;
				ReopenImageButton.Visible = false;
				RejectImageButton.Visible = false;
			}
		}
	}

	protected void ApproveImageButton_Click(object sender, System.Web.UI.ImageClickEventArgs e)
	{
		ChangeRMAStatus(RMAStatus.Open);
	}

	protected void CloseImageButton_Click(object sender, System.Web.UI.ImageClickEventArgs e)
	{
		ChangeRMAStatus(RMAStatus.Closed);
	}

	protected void ReopenImageButton_Click(object sender, System.Web.UI.ImageClickEventArgs e)
	{
		ChangeRMAStatus(RMAStatus.Open);
	}

	private void ChangeRMAStatus(RMAStatus status)
	{
		if (rma.Bvin != string.Empty) {
			rma.Status = status;
			if (!RMA.Update(rma, true)) {
				MessageBox.ShowError("An error occurred while trying to update the return.");
			}
			else {
				MessageBox.ShowOk("RMA status was successfully updated.");
			}
			BindRMAInfo();
			BindButtons();
		}
	}

	protected void ReceiveImageButton_Click(object sender, System.Web.UI.ImageClickEventArgs e)
	{
		if (Page.IsValid) {
			foreach (GridViewRow row in RMAGridView.Rows) {
				if (row.RowType == DataControlRowType.DataRow) {
					string key = (string)RMAGridView.DataKeys[row.RowIndex].Value;
					int received = int.Parse(((TextBox)row.FindControl("QuantityTextBox")).Text);
					bool returnToInventory = ((CheckBox)row.FindControl("ReturnToInventoryCheckBox")).Checked;
					RMAItem RMAItem = RMAItem.FindByBvin(key);
					if (RMAItem != null) {
						RMAItem.QuantityReceived += received;
						if (!RMAItem.Update(RMAItem)) {
							MessageBox.ShowError("An error occurred while trying to update the return.");
							return;
						}

						// Return to Inventory Here
						if (!RMAItem.LineItem.ReturnQuantity(received, returnToInventory)) {
							EventLog.LogEvent("Receive RMA Items", "Unable to return quantity of " + received + " of product " + RMAItem.Product.Bvin, MerchantTribe.Commerce.Metrics.EventLogSeverity.Error);
							MessageBox.ShowError("Item was successfully received, but an error occurred while trying to return your items to inventory. This item may not have inventory enabled.");
							return;
						}
						else {
							if (!LineItem.Update(RMAItem.LineItem)) {
								MessageBox.ShowError("An error occurred while trying to mark the items as returned in the order");
								return;
							}
							else {
								MessageBox.ShowOk("Item(s) successfully received.");
							}

							if (returnToInventory) {
								RMAItem.QuantityReturnedToInventory += received;
								if (!RMAItem.Update(RMAItem)) {
									MessageBox.ShowError("Item(s) were returned to inventory, but RMA was not successfully updated.");
								}
								else {
									MessageBox.ShowOk("Item(s) successfully returned to inventory.");
								}
							}
						}
					}
					else {
						MessageBox.ShowError("An error occurred while trying to access the database");
					}
				}
			}
		}
		BindRMAGridView();
	}

	protected void RejectImageButton_Click(object sender, System.Web.UI.ImageClickEventArgs e)
	{
		ChangeRMAStatus(RMAStatus.Rejected);
	}

	protected void IsNumeric_ServerValidate(object source, System.Web.UI.WebControls.ServerValidateEventArgs args)
	{
        decimal temp;
		if (decimal.TryParse(args.Value,out temp)) {
			args.IsValid = true;
		}
		else {
			args.IsValid = false;
		}
	}
}
