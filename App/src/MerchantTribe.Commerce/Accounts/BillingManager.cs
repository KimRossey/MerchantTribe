using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MerchantTribe.Billing;
using MerchantTribe.Web;

namespace MerchantTribe.Commerce.Accounts
{
    public class BillingManager
    {
        // Working with local dates and times
        public static void GenerateInvoicesForThisWeek(BVApplication bvapp)
        {            
            Utilities.DateRange thisWeekRange = new Utilities.DateRange();
            thisWeekRange.RangeType = Utilities.DateRangeType.ThisWeek;
            thisWeekRange.CalculateDatesFromType(DateTime.Now);
            List<DateTime> daysOfMonth = new List<DateTime>();
            DateTime counter = thisWeekRange.StartDate;
            int endDayOfMonth = thisWeekRange.EndDate.Day;

            while (counter.Day != endDayOfMonth)
            {
                daysOfMonth.Add(counter);                
                counter = counter.AddDays(1);                
            }

            daysOfMonth.Add(thisWeekRange.EndDate);
            GenerateInvoicesForDates(daysOfMonth, bvapp);
        }

        // Working with local dates and times
        public static void GenerateInvoicesForLastWeek(BVApplication bvapp)
        {
            Utilities.DateRange lastWeekRange = new Utilities.DateRange();
            lastWeekRange.RangeType = Utilities.DateRangeType.LastWeek;
            lastWeekRange.CalculateDatesFromType(DateTime.Now);
            List<DateTime> daysOfMonth = new List<DateTime>();
            DateTime counter = lastWeekRange.StartDate;
            int endDayOfMonth = lastWeekRange.EndDate.Day;

            while (counter.Day != endDayOfMonth)
            {
                daysOfMonth.Add(counter);
                counter = counter.AddDays(1);
            }

            daysOfMonth.Add(lastWeekRange.EndDate);
            GenerateInvoicesForDates(daysOfMonth, bvapp);
        }

        // Dates are in local time here
        public static void GenerateInvoicesForDates(List<DateTime> localDates, BVApplication bvapp)
        {
            if (localDates != null)
            {
                foreach (DateTime date in localDates)
                {
                    GenerateInvoicesForSingleDay(date, bvapp);
                    EventLog.LogEvent("Invoice Generator", "Generating Orders for Day " + date.Day, Metrics.EventLogSeverity.Information);
                }
            }
        }

        // Working with local dates and times
        public static void GenerateInvoicesForSingleDay(DateTime invoiceDateLocal, BVApplication bvapp)
        {
            List<Accounts.Store> stores = bvapp.AccountServices.Stores.FindBillableStoresForDay(invoiceDateLocal.Day);
            if (stores != null)
            {
                foreach (Store s in stores)
                {
                    GenerateInvoiceForStore(s, invoiceDateLocal, bvapp);
                }
            }
        }

        // working with local dates and times
        public static void GenerateInvoiceForStore(Store s, DateTime invoiceDateLocal, BVApplication bvapp)
        {
            // Create an Order
            Orders.Order o = new Orders.Order();
            o.StoreId = WebAppSettings.BillingStoreId;
            bvapp.OrderServices.Orders.Create(o);

            o.Notes.Add(new Orders.OrderNote() { IsPublic = false, Note = "Auto Generated By Invoicing System" });

            // Base Rate
            Orders.LineItem li = new Orders.LineItem();
            li.BasePricePerItem = s.CurrentPlanRate;
            li.ProductName = "BV Commerce Hosted: " + s.PlanName;
            li.ProductSku = "BVH" + s.PlanId;
            li.Quantity = 1;
            li.QuantityShipped = 1;
            li.ShippingSchedule = -1;                        
            o.Items.Add(li);

            // need to add Percent of sales
            decimal lastMonthSales = 0;
            // End date should be immediately before bill not, not on the bill date
            DateTime localEnd = Dates.MaxOutTime(invoiceDateLocal);
            localEnd = localEnd.AddDays(-1);
            DateTime localStart = Dates.ZeroOutTime(invoiceDateLocal).AddMonths(-1);
            lastMonthSales = bvapp.OrderServices.Transactions.FindBillableTransactionTotal(localStart.ToUniversalTime(),
                                                                        localEnd.ToUniversalTime(),
                                                                        s.Id);            
            Orders.LineItem li2 = new Orders.LineItem();
            Decimal multiplier = s.CurrentPlanPercent / 100;
            Decimal transFees = Math.Round(multiplier * lastMonthSales, 2);
            li2.BasePricePerItem = transFees;
            li2.ProductName = "Transaction Fees:";
            li2.ProductShortDescription = s.CurrentPlanPercent + "% of " + lastMonthSales.ToString("c");
            li2.ProductShortDescription += " " + localStart.ToShortDateString() + " to " + localEnd.ToShortDateString();
            li2.ProductSku = "BVHTF";
            li2.Quantity = 1;
            li2.QuantityShipped = 1;
            li2.ShippingSchedule = -1;
            o.Items.Add(li2);

            List<UserAccount> users = bvapp.AccountServices.FindAdminUsersByStoreId(s.Id);
            if (users != null)
            {
                if (users.Count > 0)
                {
                    UserAccount u = users[0];
                    o.UserEmail = u.Email;
                    
                    Service svc = new Service(WebAppSettings.ApplicationConnectionString);
                    BillingAccount act = svc.Accounts.FindOrCreate(u.Email);
                    if (act != null)
                    {
                        o.BillingAddress.RegionData.Abbreviation = string.Empty;
                        o.BillingAddress.RegionName = string.Empty;
                        o.BillingAddress.PostalCode = act.BillingZipCode;
                        o.BillingAddress.FirstName = act.CreditCard.CardHolderName;
                        o.BillingAddress.Company = s.StoreName;

                        bvapp.CalculateOrder(o);

                        Orders.OrderPaymentManager payManager = new Orders.OrderPaymentManager(o, bvapp);
                        payManager.CreditCardAddInfo(act.CreditCard, o.TotalGrand);

                        o.OrderNumber = bvapp.OrderServices.GenerateNewOrderNumber(WebAppSettings.BillingStoreId).ToString();
                        o.StatusCode = Orders.OrderStatusCode.Received;
                        o.IsPlaced = true;
                        o.TimeOfOrderUtc = DateTime.UtcNow;
                        o.EvaluateCurrentShippingStatus();

                        bvapp.OrderServices.Orders.Update(o);                                                
                    }
                }
            }

        }
               
    }

}
